# (c) 2016 Open Source Geospatial Foundation - all rights reserved
# (c) 2014 - 2015 Centre for Maritime Research and Experimentation (CMRE)
# (c) 2013 - 2014 German Aerospace Center (DLR)
# This code is licensed under the GPL 2.0 license, available at the root
# application directory.

[DEFAULT]

bus_class_name = xmppBus.XMPPBus

port = 5223
address =  127.0.0.1
domain = geoserver.org

# . Those are the connection parameters to the XMPP Server.
# . The user must exists on the Server and its name must be
# . equal to the service name.
user = default.GdalContour
password = R3m0T3wP5

mucService = conference.%(domain)s
mucServicePassword = admin

resource_file_dir = /share/xmpp_data/resource_dir

# . Configure this option (along with 'backup_on_wps_execution_shared_dir' 
# . on single outputs of 'service.config') in order to make a copy
# . of the results into a shared folder before sending messages to XMPP
# . WARNING: this option takes precedence on "UPLOADER" option
# wps_execution_shared_dir = /share/xmpp_data/share

# . This section is used to configure the uploader class and connection
# . parameters.
# . This is necessary in order to let the 'upload_data' option work on
# . single outputs of 'service.config'
[UPLOADER]
# There are different implementations of the FTP Uploader available right now:
# . Plain standard FTP Protocol (based on ftplib)
#       ftpUpload.FtpUpload
# . FTP over TLS (FTPS) Protocol (based on ftplib)
#       ftpsUpload.FtpsUpload
# . S-FTP Protocol (based on paramiko Python lib)
#       sftpUpload.SFtpUpload
uploader_class_name = ftpUpload.FtpUpload
uploader_host = ftp.<your_host_here>:<your_port_here_default_21>
uploader_username = <ftp_username>
uploader_password = <ftp_password_encrypted>

# . "encryptor" you can use encrypted passwords with a private/public key couple
#
# . To generate a new private key use the following command:
#     openssl genrsa -out myTestKey.pem -passout pass:"f00bar" -des3 2048
#
# . To generate a new public key use the following command:
#     openssl rsa -pubout -in myTestKey.pem -passin pass:"f00bar" -out myTestKey.pub
#
# . To encrypt your password use the following utility
#     python encrypt.py password path/to/rsakey.pub passphrase
#
# . To double check the password is correct use the following utility
#     python decrypt.py password path/to/rsakey.pem passphrase
uploader_private_rsa_key = /share/xmpp_data/ssl/myTestKey.pem
uploader_passphrase = f00bar